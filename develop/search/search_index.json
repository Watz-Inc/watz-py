{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Watz Python SDK","text":"<p>The Python SDK for Watz APIs.</p>"},{"location":"#installation","title":"Installation","text":"<p>You can install <code>watz</code> via pip from PyPI:</p> <pre><code>$ pip install watz\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Please see the usage docs for details.</p>"},{"location":"#getting-a-key","title":"Getting a key","text":"<p>See the API section on the Watz website.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are very welcome. To learn more, see the Contributor Guide.</p>"},{"location":"#license","title":"License","text":"<p>Distributed under the terms of the Apache 2.0 license, the Watz Python SDK is free and open source software.</p>"},{"location":"#issues","title":"Issues","text":"<p>If you encounter any problems, please file an issue along with a detailed description.</p>"},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at zak@watz.coach. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"CODE_OF_CONDUCT/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"CODE_OF_CONDUCT/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"CONTRIBUTING/","title":"Contributor Guide","text":"<p>Thank you for your interest in improving this project. This project is open-source under the Apache 2.0 license and welcomes contributions in the form of bug reports, feature requests, and pull requests.</p> <p>Here is a list of important resources for contributors:</p> <ul> <li>Source Code</li> <li>Documentation</li> <li>Issue Tracker</li> <li>Code of Conduct</li> </ul>"},{"location":"CONTRIBUTING/#how-to-report-a-bug","title":"How to report a bug","text":"<p>Report bugs on the Issue Tracker.</p> <p>When filing an issue, make sure to answer these questions:</p> <ul> <li>Which operating system and Python version are you using?</li> <li>Which version of this project are you using?</li> <li>What did you do?</li> <li>What did you expect to see?</li> <li>What did you see instead?</li> </ul> <p>The best way to get your bug fixed is to provide a test case, and/or steps to reproduce the issue.</p>"},{"location":"CONTRIBUTING/#how-to-request-a-feature","title":"How to request a feature","text":"<p>Request features on the Issue Tracker.</p>"},{"location":"CONTRIBUTING/#how-to-set-up-your-development-environment","title":"How to set up your development environment","text":"<p>You need Python 3.9+ and PDM installed.</p> <p>Install the package with development requirements: <code>pdm install</code> to setup for the first time <code>pdm venv activate</code> to activate the virtual environment (whenever you open the project to work)</p>"},{"location":"CONTRIBUTING/#running-tests","title":"Running tests","text":"<ul> <li><code>pdm run nox</code> to run all sessions</li> <li><code>pdm run nox -s qa</code> to run everything that runs on a git commit, plus <code>pyright</code></li> <li><code>pdm run nox -s test</code> to run tests</li> <li><code>pdm run nox -s coverage</code> for a coverage report based on the last <code>test</code> session run</li> <li><code>pdm run nox -s docs -- serve</code> to build the docs and run a local copy at <code>http://localhost:8080</code></li> </ul> <p>Unit tests are located in the tests directory, and are written using the pytest testing framework.</p>"},{"location":"CONTRIBUTING/#how-to-submit-changes","title":"How to submit changes","text":"<p>Open a pull request to submit changes to this project.</p> <p>Your pull request needs to meet the following guidelines for acceptance:</p> <ul> <li>The Nox test suite must pass without errors and warnings.</li> <li>Include unit tests. This project maintains 100% code coverage.</li> <li>If your changes add functionality, update the documentation accordingly.</li> </ul> <p>Feel free to submit early, though\u2014we can always iterate on this.</p> <p>It is recommended to open an issue before starting work on anything. This will allow a chance to talk it over with the owners and validate your approach.</p>"},{"location":"LICENSE/","title":"LICENSE","text":"<p>Copyright 2023 Watz Inc</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at</p> <pre><code>http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p> <pre><code>                         Apache License\n                   Version 2.0, January 2004\n                http://www.apache.org/licenses/\n</code></pre> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li>Definitions.</li> </ol> <p>\"License\" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   \"control\" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity   exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, \"submitted\"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.</p> <ol> <li> <p>Grant of Copyright License. Subject to the terms and conditions of   this License, each Contributor hereby grants to You a perpetual,   worldwide, non-exclusive, no-charge, royalty-free, irrevocable   copyright license to reproduce, prepare Derivative Works of,   publicly display, publicly perform, sublicense, and distribute the   Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of   this License, each Contributor hereby grants to You a perpetual,   worldwide, non-exclusive, no-charge, royalty-free, irrevocable   (except as stated in this section) patent license to make, have made,   use, offer to sell, sell, import, and otherwise transfer the Work,   where such license applies only to those patent claims licensable   by such Contributor that are necessarily infringed by their   Contribution(s) alone or by combination of their Contribution(s)   with the Work to which such Contribution(s) was submitted. If You   institute patent litigation against any entity (including a   cross-claim or counterclaim in a lawsuit) alleging that the Work   or a Contribution incorporated within the Work constitutes direct   or contributory patent infringement, then any patent licenses   granted to You under this License for that Work shall terminate   as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the   Work or Derivative Works thereof in any medium, with or without   modifications, and in Source or Object form, provided that You   meet the following conditions:</p> </li> </ol> <p>(a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices       stating that You changed the files; and</p> <p>(c) You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.</p> <ol> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,   any Contribution intentionally submitted for inclusion in the Work   by You to the Licensor shall be under the terms and conditions of   this License, without any additional terms or conditions.   Notwithstanding the above, nothing herein shall supersede or modify   the terms of any separate license agreement you may have executed   with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade   names, trademarks, service marks, or product names of the Licensor,   except as required for reasonable and customary use in describing the   origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or   agreed to in writing, Licensor provides the Work (and each   Contributor provides its Contributions) on an \"AS IS\" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or   implied, including, without limitation, any warranties or conditions   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A   PARTICULAR PURPOSE. You are solely responsible for determining the   appropriateness of using or redistributing the Work and assume any   risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,   whether in tort (including negligence), contract, or otherwise,   unless required by applicable law (such as deliberate and grossly   negligent acts) or agreed to in writing, shall any Contributor be   liable to You for damages, including any direct, indirect, special,   incidental, or consequential damages of any character arising as a   result of this License or out of the use or inability to use the   Work (including but not limited to damages for loss of goodwill,   work stoppage, computer failure or malfunction, or any and all   other commercial damages or losses), even if such Contributor   has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing   the Work or Derivative Works thereof, You may choose to offer,   and charge a fee for, acceptance of support, warranty, indemnity,   or other liability obligations and/or rights consistent with this   License. However, in accepting such obligations, You may act only   on Your own behalf and on Your sole responsibility, not on behalf   of any other Contributor, and only if You agree to indemnify,   defend, and hold each Contributor harmless for any liability   incurred by, or claims asserted against, such Contributor by reason   of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p> <p>APPENDIX: How to apply the Apache License to your work.</p> <p>To apply the Apache License to your work, attach the following   boilerplate notice, with the fields enclosed by brackets \"[]\"   replaced with your own identifying information. (Don't include   the brackets!)  The text should be enclosed in the appropriate   comment syntax for the file format. We also recommend that a   file or class name and description of purpose be included on the   same \"printed page\" as the copyright notice for easier   identification within third-party archives.</p> <p>Copyright [yyyy] [name of copyright owner]</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at</p> <p>http://www.apache.org/licenses/LICENSE-2.0</p> <p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p>"},{"location":"conversions/","title":"Conversions","text":"<p>Most standard types are serialized to json and back without modification:</p> <ul> <li><code>bool</code></li> <li><code>int</code></li> <li><code>float</code></li> <li><code>str</code></li> <li><code>NoneType</code></li> <li><code>list</code></li> <li><code>dict</code></li> </ul> <p>The following types are supported, but serialize to json-compatible types destructively:</p> Python Type Json Type Example Input Example Output Notes <code>decimal.Decimal</code> <code>float</code> <code>Decimal(\"13.14\")</code> <code>13.14</code> <code>datetime.datetime</code> <code>str</code> <code>time(12, 0, 0)</code> <code>\"12:00:00\"</code> <code>datetime.date</code> <code>str</code> <code>date(2021, 1, 1)</code> <code>\"2021-01-01\"</code> <code>datetime.time</code> <code>str</code> <code>datetime(2021, 1, 1)</code> <code>\"2021-01-01T00:00:00+00:00\"</code> RFC 3339 format, compatible with <code>isoformat()</code> <code>datetime.timedelta</code> <code>float</code> <code>timedelta(days=1, milliseconds=1)</code> <code>86400.001</code> Total seconds <code>np.array</code> <code>list</code> <code>np.array([1, 2, 3])</code> <code>[1, 2, 3]</code> <code>set</code> <code>list</code> <code>{\"a\", \"b\", \"c\"}</code> <code>[\"a\", \"b\", \"c\"]</code> <code>tuple</code> <code>list</code> <code>(1, 2, 3)</code> <code>[1, 2, 3]</code> <code>dataclasses.dataclass</code> <code>dict</code> <code>Model(a=11, b=\"12\")</code> <code>{'a': 11, 'b': '12'}</code> <code>pydantic.dataclasses.dataclass</code> <code>dict</code> <code>Model(a=11, b=\"12\")</code> <code>{'a': 11, 'b': '12'}</code> <code>pydantic.BaseModel</code> <code>dict</code> <code>Model(a=11, b=\"12\")</code> <code>{'a': 11, 'b': '12'}</code>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#initializing-the-client","title":"Initializing the Client","text":"<p>To use the Watz API you need to obtain a key. See the API section on the Watz website for details.</p> Inline secret<pre><code>import watz\n\nclient = watz.Client(secret=\"your api key\")\n</code></pre> <p>Alternatively, a <code>Client</code> can read the api key from the environment variable <code>WATZ_SECRET</code>.</p> Secret from environment variable<pre><code>import os\nimport watz\n\nos.environ[\"WATZ_SECRET\"] = \"your api key\"\nclient = watz.Client()\n</code></pre> <p>Info</p> <p>Each call made with the <code>Client</code> is atomic. If something is invalid about the request, an exception will be raised and no changes will be made.</p>"},{"location":"usage/#creating-subjects","title":"Creating Subjects","text":"<p>A subject is an individual whom data can be assigned to. These subjects can be identified by their <code>uid</code>, currently always their email address.</p> <p>Subjects are created with a <code>NewSubject</code> model, and return a <code>Subject</code>.</p> Creating subjects<pre><code>print(\n    client.subject_create(\n        [\n            watz.models.NewSubject(email=\"bar@bar.com\"),\n            watz.models.NewSubject(email=\"foo@foo.com\"),\n        ]\n    )\n)\n\"\"\"\n[\n    Subject(\n        uid=\"bar@bar.com\",\n        email=\"bar@bar.com\",\n        activities=[],\n    ),\n    Subject(\n        uid=\"foo@foo.com\",\n        email=\"foo@foo.com\",\n        activities=[],\n    ),\n]\n\"\"\"\n</code></pre>"},{"location":"usage/#creating-activities","title":"Creating Activities","text":"<p>An activity is a specific event in time for a given subject, where data can be grouped together.</p> <p>To create an activity, the only requirement is a <code>subject_uid</code> of a previously created subject. Currently, the <code>subject_uid</code> will always be the user's email address and can be accessed from <code>subject.uid</code> of a <code>Subject</code> model.</p> <p>Activities are created with a <code>NewActivity</code> model, and return an <code>Activity</code>.</p> <p>Activities can be passed some optional parameters too:</p> Parameter Name Default Description <code>label</code> <code>\"No label\"</code> This label is attached to all <code>Activity</code> objects, and can help identify activities <code>start_time</code> <code>datetime.datetime.now()</code> This marks the start of the specific activity <code>fit_files</code> <code>[]</code> Fit files in the form of <code>bytes</code> will be parsed and used to automatically create traces for the activity Creating activities<pre><code>import os\nimport datetime as dt\n\nwith open(\"fit_file.fit\", \"rb\") as f:\n    fit_file = f.read()\n\nprint(\n    client.activity_create(\n        [\n            watz.models.NewActivity(subject_uid=\"bar@bar.com\"),\n            watz.models.NewActivity(\n                subject_uid=\"foo@foo.com\",\n                label=\"foo\",\n                start_time=dt.datetime(2021, 1, 1),\n                fit_files=[fit_file],\n            ),\n        ]\n    )\n)\n\"\"\"\n[\n    Activity(\n        uid=\"act_1_uid\", label=\"No Label\", start_time=dt.datetime.now()\n    ),\n    Activity(\n        uid=\"act_2_uid\", label=\"foo\", start_time=dt.datetime(2021, 1, 1)\n    ),\n]\n\"\"\"\n</code></pre>"},{"location":"usage/#listing-subjects-activities","title":"Listing Subjects &amp; Activities","text":"<p>The <code>Client</code> can be used to list existing subjects and activities in the system.</p> Listing subjects &amp; activities<pre><code>print(client.subject_list())\n\"\"\"\n[\n    Subject(\n        uid=\"bar@bar.com\",\n        email=\"bar@bar.com\",\n        activities=[\n            Activity(\n                uid=\"act_1_uid\",\n                label=\"No Label\",\n                start_time=dt.datetime.now(),\n            )\n        ],\n    ),\n    Subject(\n        uid=\"foo@foo.com\",\n        email=\"foo@foo.com\",\n        activities=[\n            Activity(\n                uid=\"act_2_uid\",\n                label=\"foo\",\n                start_time=dt.datetime(2021, 1, 1),\n            )\n        ],\n    ),\n]\n\"\"\"\n</code></pre>"},{"location":"usage/#creating-traces","title":"Creating Traces","text":"<p>A trace is a store of arbitrary, json-serializable data that are attached to a subject or activity parent.</p> <p>Traces are identified by their <code>name</code> and <code>parser_id</code>, which must be unique for the given subject/activity parent.</p> <p>Traces are created with a <code>NewTrace</code> model, and return a <code>Trace</code>.</p> <p>Info</p> <p>Whilst traces are stored as json, they can be passed some custom python types, which will be serialized to valid json. E.g. <code>datetime</code>, <code>numpy.array([])</code> and pydantic models. The full list of data conversions can be found on the Conversions Page.</p> Creating traces<pre><code>import datetime as dt\nfrom pydantic import BaseModel\n\nclass ExamplePdModel(BaseModel):\n    a: int\n    b: str\n\nprint(\n    client.trace_create(\n        [\n            watz.models.NewTrace(\n                # Assigning to the subject \"bar@bar.com\"\n                parent_uid=\"bar@bar.com\",\n                name=\"measurements\",\n                data={\n                    \"height\": 180,\n                    \"weight\": 80,\n                },\n            ),\n            watz.models.NewTrace(\n                # Assigning to the activity of the subject \"foo@foo.com\"\n                parent_uid=\"act_2_uid\",\n                name=\"misc\",\n                data=[\n                    # Full list of supported types on Conversions Page\n                    1,\n                    \"2\",\n                    True,\n                    None,\n                    [\"list\"],\n                    {\"dict\": \"nested\"},\n                    (4, 5, 6),\n                    dt.datetime(2021, 1, 1),\n                    ExamplePdModel(a=11, b=\"12\"),\n                ],\n            ),\n        ]\n    )\n)\n\"\"\"\n[\n    Trace(uid=\"123\", name=\"measurements\", parser_id=2),\n    Trace(uid=\"678\", name=\"misc\", parser_id=2),\n]\n\"\"\"\n</code></pre> <p>Info</p> <p><code>parser_id</code> is implicit. It's used to identify how that data entered the system. For manual inputs, it's always <code>2</code>, for e.g. fit file generated traces, it's <code>3</code>.</p>"},{"location":"usage/#retrieving-traces","title":"Retrieving Traces","text":"<p>Trace information for a given list of parents can be pulled using <code>client.trace_list()</code>.</p> <p>Important</p> <p><code>client.trace_list()</code> excludes the data itself, <code>client.trace_hydrate()</code> is needed to retrieve the actual data.</p> Listing traces<pre><code>print(\n    client.trace_list([\"bar@bar.com\", \"foo@foo.com\", \"act_2_uid\"])\n)\n\"\"\"\n{\n    \"bar@bar.com\": [\n        Trace(uid=\"123\", name=\"measurements\", parser_id=2)\n    ],\n    \"foo@foo.com\": [],\n    \"act_2_uid\": [\n        Trace(uid=\"678\", name=\"misc\", parser_id=2),\n\n        # Further traces will have come from the fit file\n        # passed into the activity creation in the previous example.\n        ...\n    ],\n}\n\"\"\"\n</code></pre> <p><code>client.trace_hydrate()</code> can then be used to convert <code>Trace</code> models to <code>TraceWithData</code> models.</p> <p><code>client.trace_hydrate()</code> can be called with an arbitrary list of traces: Hydrating a list of traces with data<pre><code>traces = client.trace_list([\"bar@bar.com\", \"foo@foo.com\", \"1_act_uid\"])\nprint(\n    client.trace_hydrate(traces[\"bar@bar.com\"])\n)\n\"\"\"\n[\n    TraceWithData(\n        uid=\"123\",\n        name=\"measurements\",\n        parser_id=2,\n        data={\"height\": 180, \"weight\": 80},\n    ),\n]\n\"\"\"\n</code></pre></p> <p>Info</p> <p><code>client.trace_hydrate()</code> under the hood uses <code>client.trace_data()</code>, which is actually returning the raw data.</p> <p>Hydration can also be called on the full output of <code>client.trace_list()</code>:</p> Hydrating full trace_list() output with data<pre><code>traces = client.trace_list([\"bar@bar.com\", \"foo@foo.com\", \"1_act_uid\"])\nprint(\n    client.trace_hydrate(traces)\n)\n\"\"\"\n{\n    \"bar@bar.com\": [\n        TraceWithData(\n            uid=\"123\",\n            name=\"measurements\",\n            parser_id=2,\n            data={\"height\": 180, \"weight\": 80},\n        )\n    ],\n    \"1_act_uid\": [\n        TraceWithData(\n            uid=\"789\",\n            name=\"activity_misc\",\n            parser_id=2,\n            data=[\n                1,\n                '2',\n                True,\n                None,\n                ['list'],\n                {'dict': 'nested'},\n                [4, 5, 6],\n                '2021-01-01T00:00:00+00:00',\n                {'a': 11, 'b': '12'}\n            ],\n        )\n    ],\n}\n\"\"\"\n</code></pre> <p>Tip</p> <p><code>client.trace_hydrate()</code> output matches the input. If <code>list[Trace]</code> is input, <code>list[TraceWithData]</code> is returned, if <code>dict[str, list[Trace]]</code> is passed in, <code>dict[str, list[TraceWithData]]</code> is returned.</p> <p>Tip</p> <p><code>client.trace_list()</code> and <code>client.trace_hydrate()</code> are separated to minify unwanted data transfer. The request might be rejected if the size of tranfer requested is too large, which is why it can be useful to target exactly what's needed.</p>"},{"location":"examples/","title":"Examples","text":"<ul> <li>Creating Traces</li> </ul>"},{"location":"examples/creating_traces/","title":"Creating traces","text":"<p>The input of data into the system is only restricted to the types on the Conversions Page, how the data is structured is left mostly up to the user.</p> <p>Data relating to individuals and activities is often temporal, and falls into some standard patterns outlined below.</p>"},{"location":"examples/creating_traces/#initialization","title":"Initialization","text":"<p>Let's create a client, subject and activity to work with:</p> Initialization<pre><code>import watz\n\nclient = watz.Client(secret=\"my api key\")\n\nclient.subject_create([\n    watz.models.NewSubject(email=\"foo@bar.com\"),\n])\n\nactivities = client.activity_create([\n    watz.models.NewActivity(subject_uid=\"foo@bar.com\")\n])\n\nact_uid = activities[0].uid\n</code></pre>"},{"location":"examples/creating_traces/#static-data","title":"Static Data","text":"<p>Some data is static, meaning it is not recorded over time.</p> <p>Examples include:</p> <ul> <li>A subject's date of birth</li> <li>A subject's height</li> <li>Calories burnt during an activitiy</li> <li>Information about sensors recording during an activity</li> </ul> <p>The data can be structured arbitrarily, some examples are shown below:</p> Static Data<pre><code>import datetime as dt\n\nclient.trace_create([\n\n    # &lt;-- Subject traces\n\n    watz.models.NewTrace(\n        parent_uid=\"foo@bar.com\",\n        name=\"profile\",\n        data={\n            \"name\": \"foo bar\",\n            \"dob\": dt.date(1990, 1, 1),\n            \"height\": {\n                \"value\": 180,\n                \"unit\": \"cm\",\n            },\n            \"gender\": \"m\",\n        },\n    ),\n\n    # &lt;-- Activity traces\n\n    watz.models.NewTrace(\n        parent_uid=act_uid,\n        name=\"calories\",\n        data=678,\n    ),\n    watz.models.NewTrace(\n        parent_uid=act_uid,\n        name=\"sensors\",\n        data=[\n        {\n            \"name\": \"accelerometer\",\n            \"id\": \"123\",\n        }, \n        {\n            \"name\": \"gyroscope\",\n            \"id\": \"456\",\n        }],\n    ),\n])\n</code></pre>"},{"location":"examples/creating_traces/#temporal-data","title":"Temporal Data","text":"<p>A lot of data is temporal, meaning it is recorded over time, where each recording is associated with a timestamp.</p> <p>Examples include:</p> <ul> <li>A subject's weight</li> <li>A subject's resting heart rate</li> <li>Heart rate or power output during an activity</li> <li>GPS coordinates during an activity</li> </ul> <p>The data can be structured arbitrarily, some examples are shown below:</p> Temporal Data<pre><code>import datetime as dt\n\nclient.trace_create([\n\n    # &lt;-- Subject traces\n\n    watz.models.NewTrace(\n        parent_uid=\"foo@bar.com\",\n        name=\"weight\",\n        data={\n            \"unit\": \"kg\",\n            \"values\": [\n                (65.3, dt.datetime(2021, 1, 1)), \n                (65.2, dt.datetime(2021, 1, 2)), \n            ],\n        },\n    ),\n    watz.models.NewTrace(\n        parent_uid=\"foo@bar.com\",\n        name=\"resting_heart_rate\",\n        data={\n            \"unit\": \"bpm\",\n            \"values\": [65, 64],\n            \"timestamps\": [\n                dt.datetime(2021, 1, 1), \n                dt.datetime(2021, 1, 2), \n            ],\n        },\n    ),    \n\n    # &lt;-- Activity traces\n\n    # If attributes share a temporal trace, they could be stored together:\n    watz.models.NewTrace(\n        parent_uid=act_uid,\n        name=\"hr/power\",\n        data={\n            \"hr\": {\n                \"unit\": \"bpm\",\n                \"values\": [102, 110]\n            },\n            \"power\": {\n                \"unit\": \"watts\", \n                \"values\": [200, 210],\n            },\n            \"timestamps\": [\n                dt.datetime(2021, 1, 1), \n                dt.datetime(2021, 1, 2), \n            ],\n        },\n    ),\n\n    # Alternatively, traces could reference a shared temporal trace:\n    watz.models.NewTrace(\n        parent_uid=act_uid,\n        name=\"coord_ts\",\n        data=[\n            dt.datetime(2021, 1, 1), \n            dt.datetime(2021, 1, 2), \n        ]\n    ),\n    watz.models.NewTrace(\n        parent_uid=act_uid,\n        name=\"lat\",\n        data={\n            \"values\": [1.234, 1.235],\n            \"ts_trace_name\": \"coord_ts\",\n        },\n    ),\n    watz.models.NewTrace(\n        parent_uid=act_uid,\n        name=\"long\",\n        data={\n            \"values\": [1.234, 1.235],\n            \"ts_trace_name\": \"coord_ts\",\n        },\n    ),    \n])\n</code></pre> <p>Note</p> <p><code>datetime.datetime</code> is used here for simplicity, using pre-serialized timestamps would make no difference.</p> <p>Note</p> <p>Support for updating &amp; deleting existing traces coming soon.</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>watz<ul> <li>client</li> <li>helpers</li> <li>models</li> </ul> </li> </ul>"},{"location":"reference/client/","title":"client","text":"<p>The central API client.</p>"},{"location":"reference/client/#watz.client.Client","title":"<code>Client(secret=None, base='https://watz.coach')</code>","text":"<p>             Bases: <code>ClientBase</code></p> <p>The central API client.</p> <p>Instantiates a new client.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>Optional[str]</code> <p>The API key. If omitted, will be read from the WATZ_SECRET environment variable.</p> <code>None</code> <code>base</code> <code>str</code> <p>The base URL of the Watz API.</p> <code>'https://watz.coach'</code> Source code in <code>watz/client.py</code> <pre><code>def __init__(\n    self,\n    secret: Optional[tp.Optional[str]] = None,\n    base: str = \"https://watz.coach\",\n):\n    \"\"\"Instantiates a new client.\n\n    Args:\n        secret (tp.Optional[str], optional): The API key. If omitted, will be read from the WATZ_SECRET environment variable.\n        base (str, optional): The base URL of the Watz API.\n    \"\"\"\n    super().__init__(base=base, secret=secret, version=1)\n</code></pre>"},{"location":"reference/client/#watz.client.Client.activity_create","title":"<code>activity_create(activities)</code>","text":"<p>Create new activities.</p> <p>Parameters:</p> Name Type Description Default <code>activities</code> <code>list[NewActivity]</code> <p>The activities to create.</p> required <p>Returns:</p> Type Description <code>list[Activity]</code> <p>list[Activity]: The created activity models, in the same order they were supplied.</p> Source code in <code>watz/client.py</code> <pre><code>def activity_create(self, activities: list[NewActivity]) -&gt; list[Activity]:\n    \"\"\"Create new activities.\n\n    Args:\n        activities (list[NewActivity]): The activities to create.\n\n    Returns:\n        list[Activity]: The created activity models, in the same order they were supplied.\n    \"\"\"\n    return end_activity_create.call(\n        self._session,\n        ReqActivityCreate(activities=activities),\n    ).activities\n</code></pre>"},{"location":"reference/client/#watz.client.Client.ping","title":"<code>ping()</code>","text":"<p>Availability check. Pings the API.</p> <p>Returns:</p> Type Description <code>RespPing</code> <p>RespPing</p> Source code in <code>watz/client.py</code> <pre><code>def ping(self) -&gt; RespPing:\n    \"\"\"Availability check. Pings the API.\n\n    Returns:\n        RespPing\n    \"\"\"\n    return end_ping.call(self._session, ReqPing())\n</code></pre>"},{"location":"reference/client/#watz.client.Client.subject_create","title":"<code>subject_create(subjects)</code>","text":"<p>Create new subjects.</p> <p>Parameters:</p> Name Type Description Default <code>subjects</code> <code>list[NewSubject]</code> <p>The subjects to create.</p> required <p>Returns:</p> Type Description <code>list[Subject]</code> <p>list[Subject]: The created subject models, in the same order they were supplied.</p> Source code in <code>watz/client.py</code> <pre><code>def subject_create(self, subjects: list[NewSubject]) -&gt; list[Subject]:\n    \"\"\"Create new subjects.\n\n    Args:\n        subjects (list[NewSubject]): The subjects to create.\n\n    Returns:\n        list[Subject]: The created subject models, in the same order they were supplied.\n    \"\"\"\n    return end_subject_create.call(\n        self._session,\n        ReqSubjectCreate(\n            subjects=tp.cast(  # Pydantic can handle the conversion if needed.\n                list[NewSubject], subjects\n            )\n        ),\n    ).subjects\n</code></pre>"},{"location":"reference/client/#watz.client.Client.subject_list","title":"<code>subject_list()</code>","text":"<p>Retrieve the caller's subjects.</p> <p>Returns:</p> Type Description <code>list[Subject]</code> <p>list[Subject]</p> Source code in <code>watz/client.py</code> <pre><code>def subject_list(self) -&gt; list[Subject]:\n    \"\"\"Retrieve the caller's subjects.\n\n    Returns:\n        list[Subject]\n    \"\"\"\n    return end_subject_list.call(self._session, ReqSubjectList()).subjects\n</code></pre>"},{"location":"reference/client/#watz.client.Client.trace_create","title":"<code>trace_create(traces)</code>","text":"<p>Create new traces.</p> <p>Parameters:</p> Name Type Description Default <code>traces</code> <code>list[NewTrace]</code> <p>The traces to create.</p> required <p>Returns:</p> Type Description <code>list[Trace]</code> <p>list[Trace]: The created <code>Trace</code> objects, in the same order they were supplied.</p> Source code in <code>watz/client.py</code> <pre><code>def trace_create(self, traces: list[NewTrace]) -&gt; list[Trace]:\n    \"\"\"Create new traces.\n\n    Args:\n        traces (list[NewTrace]): The traces to create.\n\n    Returns:\n        list[Trace]: The created `Trace` objects, in the same order they were supplied.\n    \"\"\"\n    try:\n        return end_trace_create.call(\n            self._session,\n            ReqTraceCreate(traces=traces),\n        ).traces\n    except PydanticSerializationError as e:\n        raise TypeError(\n            \"Serialization failure. Some entered types are not supported: '{}'\".format(e)\n        ) from e\n</code></pre>"},{"location":"reference/client/#watz.client.Client.trace_data","title":"<code>trace_data(uids)</code>","text":"<p>Retrieves the trace data for the request traces.</p> <p>Parameters:</p> Name Type Description Default <code>uids</code> <code>list[str]</code> <p>The trace uids to retrieve data for.</p> required <p>Returns:</p> Type Description <code>list[bytes]</code> <p>list[bytes]: The encoded trace data objects in the same order they were requested. The data can be decoded with <code>orjson.loads(data)</code>.</p> Source code in <code>watz/client.py</code> <pre><code>def trace_data(self, uids: list[str]) -&gt; list[bytes]:\n    \"\"\"Retrieves the trace data for the request traces.\n\n    Args:\n        uids (list[str]): The trace uids to retrieve data for.\n\n    Returns:\n        list[bytes]: The encoded trace data objects in the same order they were requested. The data can be decoded with `orjson.loads(data)`.\n    \"\"\"\n    src = end_trace_data.call(\n        self._session,\n        ReqTraceData(uids=uids),\n    ).root\n    try:\n        with zipfile.ZipFile(io.BytesIO(src)) as zip_file:\n            return [zip_file.read(uid) for uid in uids]\n    except zipfile.BadZipFile as e:\n        raise ValueError(\n            \"Unexpected response from Watz API. Content was not readable as a zipfile. Contents: '{}'\".format(\n                src\n            )\n        ) from e\n    except KeyError as e:\n        raise ValueError(\n            \"Unexpected response from Watz API. Missing required data in response.\"\n        ) from e\n</code></pre>"},{"location":"reference/client/#watz.client.Client.trace_hydrate","title":"<code>trace_hydrate(traces)</code>","text":"<p>Hydrates <code>Trace</code> objects with their data, internally calls <code>client.trace_data()</code>. This method supports a simple list of traces or the direct output from <code>client.trace_list()</code> for ease of use.</p> <p>Parameters:</p> Name Type Description Default <code>traces</code> <code>`list[Trace] | dict[str, list[Trace]]`</code> <p>The traces to hydrate, either a specific list of traces, or the whole output from <code>client.trace_list()</code>.</p> required <p>Returns:</p> Type Description <code>Union[list[TraceWithData], dict[str, list[TraceWithData]]]</code> <p><code>list[TraceWithData] | dict[str, list[TraceWithData]]</code>: The hydrated traces are returned in the same structure as passed in, where <code>Trace</code> objects have been replaced with <code>TraceData</code> objects. <code>TraceData</code> objects have an extra <code>data</code> attribute which contains the trace data.</p> Source code in <code>watz/client.py</code> <pre><code>def trace_hydrate(\n    self, traces: tp.Union[list[Trace], dict[str, list[Trace]]]\n) -&gt; tp.Union[list[TraceWithData], dict[str, list[TraceWithData]]]:\n    \"\"\"Hydrates `Trace` objects with their data, internally calls `client.trace_data()`. This method supports a simple list of traces or the direct output from `client.trace_list()` for ease of use.\n\n    Args:\n        traces (`list[Trace] | dict[str, list[Trace]]`): The traces to hydrate, either a specific list of traces, or the whole output from `client.trace_list()`.\n\n    Returns:\n        `list[TraceWithData] | dict[str, list[TraceWithData]]`: The hydrated traces are returned in the same structure as passed in, where `Trace` objects have been replaced with `TraceData` objects. `TraceData` objects have an extra `data` attribute which contains the trace data.\n    \"\"\"\n    # Map needed when passing in as dict rather than list:\n    trace_to_parent_map: dict[str, str] = {}\n    if isinstance(traces, list):\n        in_traces = traces\n    else:\n        trace_to_parent_map = {}\n        in_traces = []\n        for parent_uid, trace_group in traces.items():\n            for trace in trace_group:\n                trace_to_parent_map[trace.uid] = parent_uid\n                in_traces.append(trace)\n\n    hydrated_traces = [\n        TraceWithData(**trace.model_dump(), data=orjson.loads(data))\n        for trace, data in zip(in_traces, self.trace_data([trace.uid for trace in in_traces]))\n    ]\n\n    if isinstance(traces, list):\n        return hydrated_traces\n\n    out_map: dict[str, list[TraceWithData]] = {}\n    for trace in hydrated_traces:\n        parent_uid = trace_to_parent_map[trace.uid]\n        try:\n            out_map[parent_uid].append(trace)\n        except KeyError:\n            out_map[parent_uid] = [trace]\n\n    return out_map\n</code></pre>"},{"location":"reference/client/#watz.client.Client.trace_list","title":"<code>trace_list(uids)</code>","text":"<p>Retrieves the trace metadata for the requested subjects/activities.</p> <p>Parameters:</p> Name Type Description Default <code>uids</code> <code>list[str]</code> <p>The subject/activity uids to retrieve trace metadata for.</p> required <p>Returns:</p> Type Description <code>dict[str, list[Trace]]</code> <p>dict[str, list[Trace]]: The parent uid as key and list of their traces as values.</p> Source code in <code>watz/client.py</code> <pre><code>def trace_list(self, uids: list[str]) -&gt; dict[str, list[Trace]]:\n    \"\"\"Retrieves the trace metadata for the requested subjects/activities.\n\n    Args:\n        uids (list[str]): The subject/activity uids to retrieve trace metadata for.\n\n    Returns:\n        dict[str, list[Trace]]: The parent uid as key and list of their traces as values.\n    \"\"\"\n    return end_trace_list.call(\n        self._session,\n        ReqTraceList(uids=uids),\n    ).traces\n</code></pre>"},{"location":"reference/helpers/","title":"helpers","text":"<p>Miscellaneous helper functions.</p>"},{"location":"reference/helpers/#watz.helpers.dump","title":"<code>dump(obj)</code>","text":"<p>Dumps all pydantic models in an arbitrary object to dicts. As a side effect iterables are all downcast to lists. Useful when models exist in e.g. a list.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>The object to dump.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>tp.Any: The dumped object.</p> Source code in <code>watz/helpers.py</code> <pre><code>def dump(\n    obj: tp.Any,\n) -&gt; tp.Any:\n    \"\"\"Dumps all pydantic models in an arbitrary object to dicts. As a side effect iterables are all downcast to lists. Useful when models exist in e.g. a list.\n\n    Args:\n        obj: The object to dump.\n\n    Returns:\n        tp.Any: The dumped object.\n    \"\"\"\n    if isinstance(obj, BaseModel):\n        return dump(obj.model_dump())\n\n    if isinstance(obj, dict):\n        return {dump(key): dump(value) for key, value in obj.items()}\n\n    if isinstance(obj, (list, set, frozenset, GeneratorType, tuple, deque)):\n        return [dump(item) for item in obj]\n\n    return obj\n</code></pre>"},{"location":"reference/helpers/#watz.helpers.serialize","title":"<code>serialize(obj)</code>","text":"<p>A wrapper on <code>orjson.dumps()</code> to include all configuration options for handling all supported types.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>The object to serialize to json.</p> required <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>The serialized json bytes blob.</p> Source code in <code>watz/helpers.py</code> <pre><code>def serialize(obj: tp.Any) -&gt; bytes:\n    \"\"\"A wrapper on `orjson.dumps()` to include all configuration options for handling all supported types.\n\n    Args:\n        obj: The object to serialize to json.\n\n    Returns:\n        bytes: The serialized json bytes blob.\n    \"\"\"\n    return orjson.dumps(\n        obj,\n        option=orjson.OPT_SERIALIZE_NUMPY\n        | orjson.OPT_SERIALIZE_DATACLASS\n        | orjson.OPT_SERIALIZE_UUID\n        | orjson.OPT_NAIVE_UTC,  # Make dts without timezone info default to UTC\n        # Fallback to the python func on types orjson doesn't support:\n        default=_orjson_extras,\n    )\n</code></pre>"},{"location":"reference/models/","title":"models","text":"<p>Data models returned from the client and those needed to pass into client methods.</p>"},{"location":"reference/models/#watz.models.Activity","title":"<code>Activity</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>An activity of a subject.</p> <p>Attributes:</p> Name Type Description <code>uid</code> <code>str</code> <p>The activity's unique id.</p> <code>start_time</code> <code>datetime</code> <p>The start time of the activity.</p> <code>label</code> <code>str</code> <p>The activity's label.</p>"},{"location":"reference/models/#watz.models.NewActivity","title":"<code>NewActivity</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>A creator model for an activity.</p> <p>Attributes:</p> Name Type Description <code>subject_uid</code> <code>str</code> <p>The uid of the subject to create the activity for.</p> <code>fit_files</code> <code>list[bytes]</code> <p>A list of fit files to upload for the activity. <code>start_time</code> and <code>label</code> will be extracted from the fit files if possible.</p> <code>start_time</code> <code>Optional[datetime]</code> <p>The start datetime of the activity, if omitted this will default to the current time. Fit files will override this value.</p> <code>label</code> <code>Optional[str]</code> <p>An optional label for the activity. If omitted, the label will default to \"No label\". Fit files will override this value.</p>"},{"location":"reference/models/#watz.models.NewActivity.serialize_fit_files","title":"<code>serialize_fit_files(v, _info)</code>","text":"<p>Fit files will be attached as files separately, replace with an empty list as bytes cannot be sent in json.</p> Source code in <code>watz/_endpoints/activity_create.py</code> <pre><code>@field_serializer(\"fit_files\", when_used=\"json\")\ndef serialize_fit_files(self, v: tp.Any, _info: tp.Any) -&gt; list[str]:\n    \"\"\"Fit files will be attached as files separately, replace with an empty list as bytes cannot be sent in json.\"\"\"\n    return []\n</code></pre>"},{"location":"reference/models/#watz.models.NewSubject","title":"<code>NewSubject</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>A creator model for a subject.</p> <p>Attributes:</p> Name Type Description <code>email</code> <code>str</code> <p>The subject's email address. Currently, this will be used as the uid.</p>"},{"location":"reference/models/#watz.models.NewTrace","title":"<code>NewTrace</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>A creator model for a trace.</p> <p>Attributes:</p> Name Type Description <code>parent_uid</code> <code>str</code> <p>The subject/activity uid to create the trace for.</p> <code>name</code> <code>str</code> <p>The trace's identifier, this must be unique to the subject/activity.</p> <code>data</code> <code>Any</code> <p>Any json-compatible data to store.</p>"},{"location":"reference/models/#watz.models.NewTrace.serialize_data_json","title":"<code>serialize_data_json(v, _info)</code>","text":"<p>Custom types such as numpy arrays, datetimes, dataclasses etc are handled by orjson, so serialize with that.</p> Source code in <code>watz/_endpoints/trace_create.py</code> <pre><code>@field_serializer(\"data\", when_used=\"json\")\ndef serialize_data_json(self, v: tp.Any, _info: tp.Any) -&gt; str:\n    \"\"\"Custom types such as numpy arrays, datetimes, dataclasses etc are handled by orjson, so serialize with that.\"\"\"\n    # Must be stringified to send inside json (orjson returns bytes by default)\n    return serialize(v).decode()\n</code></pre>"},{"location":"reference/models/#watz.models.Subject","title":"<code>Subject</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>A subject of a researcher.</p> <p>Attributes:</p> Name Type Description <code>uid</code> <code>str</code> <p>The subject's unique id. Currently, this is always the subject's email address.</p> <code>email</code> <code>str</code> <p>The subject's email address.</p> <code>activities</code> <code>list[Activity]</code> <p>The subject's activities.</p>"},{"location":"reference/models/#watz.models.Trace","title":"<code>Trace</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>A lightweight trace object, this doesn't include the data.</p> <p>Attributes:</p> Name Type Description <code>uid</code> <code>str</code> <p>The unique identifier for the trace.</p> <code>name</code> <code>str</code> <p>The trace's name, unique to the parent.</p> <code>parser_id</code> <code>int</code> <p>The id of the parser that manages the trace, for manually created, external traces this will always be 2, but e.g. for fit created traces this will be 3. Names can be duplicate across 2 different parsers.</p>"},{"location":"reference/models/#watz.models.TraceWithData","title":"<code>TraceWithData</code>","text":"<p>             Bases: <code>Trace</code></p> <p>An extended <code>Trace</code> model which includes the data.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>Any</code> <p>Any json-compatible data.</p>"}]}
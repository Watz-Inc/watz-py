{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Watz Python SDK","text":"<p>Python SDK for Watz APIs</p>"},{"location":"#installation","title":"Installation","text":"<p>You can install <code>watz</code> via pip from PyPI:</p> <pre><code>$ pip install watz\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Please see the documentation for details.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are very welcome. To learn more, see the Contributor Guide.</p>"},{"location":"#license","title":"License","text":"<p>Distributed under the terms of the Apache 2.0 license, the Watz Python SDK is free and open source software.</p>"},{"location":"#issues","title":"Issues","text":"<p>If you encounter any problems, please file an issue along with a detailed description.</p>"},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at zak@watz.coach. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"CODE_OF_CONDUCT/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"CODE_OF_CONDUCT/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"CONTRIBUTING/","title":"Contributor Guide","text":"<p>Thank you for your interest in improving this project. This project is open-source under the Apache 2.0 license and welcomes contributions in the form of bug reports, feature requests, and pull requests.</p> <p>Here is a list of important resources for contributors:</p> <ul> <li>Source Code</li> <li>Documentation</li> <li>Issue Tracker</li> <li>Code of Conduct</li> </ul>"},{"location":"CONTRIBUTING/#how-to-report-a-bug","title":"How to report a bug","text":"<p>Report bugs on the Issue Tracker.</p> <p>When filing an issue, make sure to answer these questions:</p> <ul> <li>Which operating system and Python version are you using?</li> <li>Which version of this project are you using?</li> <li>What did you do?</li> <li>What did you expect to see?</li> <li>What did you see instead?</li> </ul> <p>The best way to get your bug fixed is to provide a test case, and/or steps to reproduce the issue.</p>"},{"location":"CONTRIBUTING/#how-to-request-a-feature","title":"How to request a feature","text":"<p>Request features on the Issue Tracker.</p>"},{"location":"CONTRIBUTING/#how-to-set-up-your-development-environment","title":"How to set up your development environment","text":"<p>You need Python 3.9+ and PDM installed.</p> <p>Install the package with development requirements: <code>pdm install</code> to setup for the first time <code>pdm venv activate</code> to activate the virtual environment (whenever you open the project to work)</p>"},{"location":"CONTRIBUTING/#running-tests","title":"Running tests","text":"<ul> <li><code>pdm run nox</code> to run all sessions</li> <li><code>pdm run nox -s qa</code> to run everything that runs on a git commit, plus <code>pyright</code></li> <li><code>pdm run nox -s test</code> to run tests</li> <li><code>pdm run nox -s coverage</code> for a coverage report based on the last <code>test</code> session run</li> <li><code>pdm run nox -s docs -- serve</code> to build the docs and run a local copy at <code>http://localhost:8000</code></li> </ul> <p>Unit tests are located in the tests directory, and are written using the pytest testing framework.</p>"},{"location":"CONTRIBUTING/#how-to-submit-changes","title":"How to submit changes","text":"<p>Open a pull request to submit changes to this project.</p> <p>Your pull request needs to meet the following guidelines for acceptance:</p> <ul> <li>The Nox test suite must pass without errors and warnings.</li> <li>Include unit tests. This project maintains 100% code coverage.</li> <li>If your changes add functionality, update the documentation accordingly.</li> </ul> <p>Feel free to submit early, though\u2014we can always iterate on this.</p> <p>It is recommended to open an issue before starting work on anything. This will allow a chance to talk it over with the owners and validate your approach.</p>"},{"location":"LICENSE/","title":"LICENSE","text":"<p>Copyright 2023 Watz Inc</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at</p> <pre><code>http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p> <pre><code>                         Apache License\n                   Version 2.0, January 2004\n                http://www.apache.org/licenses/\n</code></pre> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li>Definitions.</li> </ol> <p>\"License\" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   \"control\" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity   exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, \"submitted\"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.</p> <ol> <li> <p>Grant of Copyright License. Subject to the terms and conditions of   this License, each Contributor hereby grants to You a perpetual,   worldwide, non-exclusive, no-charge, royalty-free, irrevocable   copyright license to reproduce, prepare Derivative Works of,   publicly display, publicly perform, sublicense, and distribute the   Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of   this License, each Contributor hereby grants to You a perpetual,   worldwide, non-exclusive, no-charge, royalty-free, irrevocable   (except as stated in this section) patent license to make, have made,   use, offer to sell, sell, import, and otherwise transfer the Work,   where such license applies only to those patent claims licensable   by such Contributor that are necessarily infringed by their   Contribution(s) alone or by combination of their Contribution(s)   with the Work to which such Contribution(s) was submitted. If You   institute patent litigation against any entity (including a   cross-claim or counterclaim in a lawsuit) alleging that the Work   or a Contribution incorporated within the Work constitutes direct   or contributory patent infringement, then any patent licenses   granted to You under this License for that Work shall terminate   as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the   Work or Derivative Works thereof in any medium, with or without   modifications, and in Source or Object form, provided that You   meet the following conditions:</p> </li> </ol> <p>(a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices       stating that You changed the files; and</p> <p>(c) You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.</p> <ol> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,   any Contribution intentionally submitted for inclusion in the Work   by You to the Licensor shall be under the terms and conditions of   this License, without any additional terms or conditions.   Notwithstanding the above, nothing herein shall supersede or modify   the terms of any separate license agreement you may have executed   with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade   names, trademarks, service marks, or product names of the Licensor,   except as required for reasonable and customary use in describing the   origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or   agreed to in writing, Licensor provides the Work (and each   Contributor provides its Contributions) on an \"AS IS\" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or   implied, including, without limitation, any warranties or conditions   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A   PARTICULAR PURPOSE. You are solely responsible for determining the   appropriateness of using or redistributing the Work and assume any   risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,   whether in tort (including negligence), contract, or otherwise,   unless required by applicable law (such as deliberate and grossly   negligent acts) or agreed to in writing, shall any Contributor be   liable to You for damages, including any direct, indirect, special,   incidental, or consequential damages of any character arising as a   result of this License or out of the use or inability to use the   Work (including but not limited to damages for loss of goodwill,   work stoppage, computer failure or malfunction, or any and all   other commercial damages or losses), even if such Contributor   has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing   the Work or Derivative Works thereof, You may choose to offer,   and charge a fee for, acceptance of support, warranty, indemnity,   or other liability obligations and/or rights consistent with this   License. However, in accepting such obligations, You may act only   on Your own behalf and on Your sole responsibility, not on behalf   of any other Contributor, and only if You agree to indemnify,   defend, and hold each Contributor harmless for any liability   incurred by, or claims asserted against, such Contributor by reason   of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p> <p>APPENDIX: How to apply the Apache License to your work.</p> <p>To apply the Apache License to your work, attach the following   boilerplate notice, with the fields enclosed by brackets \"[]\"   replaced with your own identifying information. (Don't include   the brackets!)  The text should be enclosed in the appropriate   comment syntax for the file format. We also recommend that a   file or class name and description of purpose be included on the   same \"printed page\" as the copyright notice for easier   identification within third-party archives.</p> <p>Copyright [yyyy] [name of copyright owner]</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at</p> <p>http://www.apache.org/licenses/LICENSE-2.0</p> <p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>watz<ul> <li>client</li> <li>endpoints<ul> <li>get_node_map</li> <li>get_ping</li> <li>get_trace_data</li> <li>get_trace_list</li> <li>post_create_nodes</li> <li>post_create_traces</li> <li>resp_base</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/client/","title":"client","text":"<p>The central API client.</p>"},{"location":"reference/client/#watz.client.Client","title":"<code>Client(base='https://watz.coach', secret=None)</code>","text":"<p>             Bases: <code>ClientBase</code></p> <p>The central API client.</p> <p>Instantiates a new client.</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>str</code> <p>The base URL of the Watz API.</p> <code>'https://watz.coach'</code> <code>secret</code> <code>Optional[str]</code> <p>The API key. If omitted, will be read from the WATZ_SECRET environment variable.</p> <code>None</code> Source code in <code>watz/client.py</code> <pre><code>def __init__(\n    self,\n    base: str = \"https://watz.coach\",\n    secret: Optional[tp.Optional[str]] = None,\n):\n    \"\"\"Instantiates a new client.\n\n    Args:\n        base (str, optional): The base URL of the Watz API.\n        secret (tp.Optional[str], optional): The API key. If omitted, will be read from the WATZ_SECRET environment variable.\n    \"\"\"\n    super().__init__(base=base, secret=secret, version=1)\n</code></pre>"},{"location":"reference/client/#watz.client.Client.root_nid","title":"<code>root_nid: str</code>  <code>cached</code> <code>property</code>","text":"<p>The root node's id for the calling user. This is retrieved from a <code>ping()</code> on creation and cached thereafter.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The root node's id.</p>"},{"location":"reference/client/#watz.client.Client.create_nodes","title":"<code>create_nodes(nodes)</code>","text":"<p>Creates new nodes.</p> <p>Parameters:</p> Name Type Description Default <code>nodes</code> <code>Iterable[Union[CreateActivityNode, CreateUserNode]]</code> <p>The nodes to create.</p> required <p>Returns:</p> Type Description <code>RespCreateNodes</code> <p>RespCreateNodes</p> Source code in <code>watz/client.py</code> <pre><code>def create_nodes(\n    self, nodes: tp.Iterable[tp.Union[CreateActivityNode, CreateUserNode]]\n) -&gt; RespCreateNodes:\n    \"\"\"Creates new nodes.\n\n    Args:\n        nodes (tp.Iterable[tp.Union[CreateActivityNode, CreateUserNode]]): The nodes to create.\n\n    Returns:\n        RespCreateNodes\n    \"\"\"\n    return end_create_nodes.call(\n        self._session,\n        ReqCreateNodes(\n            nodes=tp.cast(  # Pydantic can handle the conversion if needed.\n                list[tp.Union[CreateActivityNode, CreateUserNode]], nodes\n            )\n        ),\n    )\n</code></pre>"},{"location":"reference/client/#watz.client.Client.create_traces","title":"<code>create_traces(traces)</code>","text":"<p>Creates new traces.</p> <p>Parameters:</p> Name Type Description Default <code>traces</code> <code>Mapping[str, Iterable[CreateTrace]]</code> <p>A dict of node ids to a list of traces to create for each respective node.</p> required <p>Returns:</p> Type Description <code>RespCreateTraces</code> <p>RespCreateTraces</p> Source code in <code>watz/client.py</code> <pre><code>def create_traces(self, traces: tp.Mapping[str, tp.Iterable[CreateTrace]]) -&gt; RespCreateTraces:\n    \"\"\"Creates new traces.\n\n    Args:\n        traces (tp.Mapping[str, tp.Iterable[CreateTrace]]): A dict of node ids to a list of traces to create for each respective node.\n\n    Returns:\n        RespCreateTraces\n    \"\"\"\n    return end_create_traces.call(\n        self._session,\n        ReqCreateTraces(\n            traces=tp.cast(  # Pydantic can handle the conversion if needed.\n                dict[str, list[CreateTrace]], traces\n            )\n        ),\n    )\n</code></pre>"},{"location":"reference/client/#watz.client.Client.node_map","title":"<code>node_map(root_nid=None)</code>","text":"<p>Retrieve the structure of nodes accessible to the caller.</p> <p>Parameters:</p> Name Type Description Default <code>root_nid</code> <code>Optional[str]</code> <p>The root node's id to build the map from. If <code>None</code>, the root node is assumed to be the calling user's root node, stored from a <code>ping()</code> on creation.</p> <code>None</code> <p>Returns:</p> Type Description <code>RespNodeMap</code> <p>RespNodeMap</p> Source code in <code>watz/client.py</code> <pre><code>def node_map(self, root_nid: Optional[tp.Optional[str]] = None) -&gt; RespNodeMap:\n    \"\"\"Retrieve the structure of nodes accessible to the caller.\n\n    Args:\n        root_nid (tp.Optional[str], optional): The root node's id to build the map from. If `None`, the root node is assumed to be the calling user's root node, stored from a `ping()` on creation.\n\n    Returns:\n        RespNodeMap\n    \"\"\"\n    return end_node_map.call(self._session, ReqNodeMap(root_nid=root_nid or self.root_nid))\n</code></pre>"},{"location":"reference/client/#watz.client.Client.ping","title":"<code>ping()</code>","text":"<p>Ping the API.</p> <p>Returns:</p> Type Description <code>RespPing</code> <p>RespPing</p> Source code in <code>watz/client.py</code> <pre><code>def ping(self) -&gt; RespPing:\n    \"\"\"Ping the API.\n\n    Returns:\n        RespPing\n    \"\"\"\n    return end_ping.call(self._session, ReqPing())\n</code></pre>"},{"location":"reference/client/#watz.client.Client.trace_data","title":"<code>trace_data(traces)</code>","text":"<p>Retrieves the trace data for the request traces.</p> <p>Parameters:</p> Name Type Description Default <code>traces</code> <code>Mapping[str, Iterable[str]]</code> <p>A dict of node ids to a list of trace identifiers for each respective node.</p> required <p>Returns:</p> Type Description <code>RespTraceData</code> <p>RespTraceData</p> Source code in <code>watz/client.py</code> <pre><code>def trace_data(self, traces: tp.Mapping[str, tp.Iterable[str]]) -&gt; RespTraceData:\n    \"\"\"Retrieves the trace data for the request traces.\n\n    Args:\n        traces (tp.Mapping[str, tp.Iterable[str]]): A dict of node ids to a list of trace identifiers for each respective node.\n\n    Returns:\n        RespTraceData\n    \"\"\"\n    return end_trace_data.call(\n        self._session,\n        ReqTraceData(\n            traces=tp.cast(  # Pydantic can handle the conversion if needed.\n                dict[str, list[str]], traces\n            ),\n        ),\n    )\n</code></pre>"},{"location":"reference/client/#watz.client.Client.trace_list","title":"<code>trace_list(nids)</code>","text":"<p>Retrieves the trace metadata for the requested nodes.</p> <p>Parameters:</p> Name Type Description Default <code>nids</code> <code>Iterable[str]</code> <p>The node ids to retrieve trace metadata for.</p> required <p>Returns:</p> Type Description <code>RespTraceList</code> <p>RespTraceList</p> Source code in <code>watz/client.py</code> <pre><code>def trace_list(self, nids: tp.Iterable[str]) -&gt; RespTraceList:\n    \"\"\"Retrieves the trace metadata for the requested nodes.\n\n    Args:\n        nids (tp.Iterable[str]): The node ids to retrieve trace metadata for.\n\n    Returns:\n        RespTraceList\n    \"\"\"\n    return end_trace_list.call(\n        self._session,\n        ReqTraceList(\n            nids=tp.cast(list[str], nids)  # Pydantic can handle the conversion if needed.\n        ),\n    )\n</code></pre>"},{"location":"reference/endpoints/get_node_map/","title":"get_node_map","text":"<p><code>GET</code>: <code>/api/v1/node-map</code> endpoint configuration.</p>"},{"location":"reference/endpoints/get_node_map/#watz.endpoints.get_node_map.ActivityNode","title":"<code>ActivityNode</code>","text":"<p>             Bases: <code>NodeBase</code></p> <p>An activity node. Labels are non-unique. When no custom label, this nodes label defaults to the nid.</p>"},{"location":"reference/endpoints/get_node_map/#watz.endpoints.get_node_map.NodeBase","title":"<code>NodeBase</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>The base node model.</p> <p>Attributes:</p> Name Type Description <code>nid</code> <code>str</code> <p>The node's id.</p> <code>label</code> <code>str</code> <p>The node's label.</p>"},{"location":"reference/endpoints/get_node_map/#watz.endpoints.get_node_map.ReqNodeMap","title":"<code>ReqNodeMap</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p><code>GET</code>: <code>/api/v1/node-map</code> request model.</p> <p>Attributes:</p> Name Type Description <code>root_pk</code> <p>The root node's id to build the map from. If <code>None</code>, the root node is assumed to be the calling user's root node.</p>"},{"location":"reference/endpoints/get_node_map/#watz.endpoints.get_node_map.RespNodeMap","title":"<code>RespNodeMap</code>","text":"<p>             Bases: <code>RespBase</code></p> <p><code>GET</code>: <code>/api/v1/node-map</code> response model.</p> <p>Attributes:</p> Name Type Description <code>node</code> <code>UserNode</code> <p>The root node, matching the node id given in the request.</p>"},{"location":"reference/endpoints/get_node_map/#watz.endpoints.get_node_map.UserNode","title":"<code>UserNode</code>","text":"<p>             Bases: <code>NodeBase</code></p> <p>A user node. Labels are unique. A user node's label is always the user's email address.</p> <p>Attributes:</p> Name Type Description <code>activities</code> <code>list[ActivityNode]</code> <p>The node's relating activity nodes (if any).</p> <code>subjects</code> <code>list[UserNode]</code> <p>The node's subjects' user nodes (if the user is a researcher).</p>"},{"location":"reference/endpoints/get_ping/","title":"get_ping","text":"<p><code>GET</code>: <code>/api/v1/ping</code> endpoint configuration.</p>"},{"location":"reference/endpoints/get_ping/#watz.endpoints.get_ping.ReqPing","title":"<code>ReqPing</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p><code>GET</code>: <code>/api/v1/ping</code> request model.</p> <p>No parameters.</p>"},{"location":"reference/endpoints/get_ping/#watz.endpoints.get_ping.RespPing","title":"<code>RespPing</code>","text":"<p>             Bases: <code>RespBase</code></p> <p><code>GET</code>: <code>/api/v1/ping</code> response model.</p> <p>Attributes:</p> Name Type Description <code>status</code> <code>Literal['OK']</code> <p>Always <code>\"OK\"</code>.</p> <code>whoami</code> <code>str</code> <p>The user's email address attached to the token.</p> <code>root_nid</code> <code>str</code> <p>The calling user's root node id.</p>"},{"location":"reference/endpoints/get_trace_data/","title":"get_trace_data","text":"<p><code>GET</code>: <code>/api/v1/trace-data</code> endpoint configuration.</p>"},{"location":"reference/endpoints/get_trace_data/#watz.endpoints.get_trace_data.ReqTraceData","title":"<code>ReqTraceData</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p><code>GET</code>: <code>/api/v1/trace-data</code> request model.</p> <p>Attributes:</p> Name Type Description <code>traces</code> <code>dict[str, list[str]]</code> <p>A dict of node ids to a list of trace identifiers for each respective node.</p>"},{"location":"reference/endpoints/get_trace_data/#watz.endpoints.get_trace_data.RespTraceData","title":"<code>RespTraceData</code>","text":"<p>             Bases: <code>RespBase</code></p> <p><code>GET</code>: <code>/api/v1/trace-data</code> response model.</p> <p>Attributes:</p> Name Type Description <code>traces</code> <code>dict[str, dict[str, Optional[TraceData]]]</code> <p><code>dict[nid, dict[trace identifier, TraceData | None]]</code>. The trace will be <code>None</code> when the trace does not exist.</p>"},{"location":"reference/endpoints/get_trace_data/#watz.endpoints.get_trace_data.TraceData","title":"<code>TraceData</code>","text":"<p>             Bases: <code>TraceMeta</code></p> <p>An extended <code>TraceMeta</code> object that contains the trace's data.</p> <p>Attributes:</p> Name Type Description <code>data</code> <code>list[Any]</code> <p>The list of json-compatible data.</p>"},{"location":"reference/endpoints/get_trace_list/","title":"get_trace_list","text":"<p><code>GET</code>: <code>/api/v1/trace-list</code> endpoint configuration.</p>"},{"location":"reference/endpoints/get_trace_list/#watz.endpoints.get_trace_list.ReqTraceList","title":"<code>ReqTraceList</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p><code>GET</code>: <code>/api/v1/trace-list</code> request model.</p> <p>Attributes:</p> Name Type Description <code>nids</code> <code>list[str]</code> <p>The node ids to pull the <code>TraceMeta</code> for.</p>"},{"location":"reference/endpoints/get_trace_list/#watz.endpoints.get_trace_list.RespTraceList","title":"<code>RespTraceList</code>","text":"<p>             Bases: <code>RespBase</code></p> <p><code>GET</code>: <code>/api/v1/trace-list</code> response model.</p> <p>Attributes:</p> Name Type Description <code>traces</code> <code>dict[str, dict[str, TraceMeta]]</code> <p><code>dict[nid, dict[trace identifier, TraceMeta]]</code>.</p>"},{"location":"reference/endpoints/get_trace_list/#watz.endpoints.get_trace_list.TraceMeta","title":"<code>TraceMeta</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>A trace meta object. This is a lightweight object that contains the trace's metadata but excludes the data itself.</p> <p>Attributes:</p> Name Type Description <code>identifier</code> <code>str</code> <p>The trace's identifier.</p> <code>length</code> <code>int</code> <p>The trace's length.</p>"},{"location":"reference/endpoints/post_create_nodes/","title":"post_create_nodes","text":"<p><code>POST</code>: <code>/api/v1/nodes</code> endpoint configuration.</p>"},{"location":"reference/endpoints/post_create_nodes/#watz.endpoints.post_create_nodes.CreateActivityNode","title":"<code>CreateActivityNode</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>A creator model for an activity node.</p> <p>Attributes:</p> Name Type Description <code>parent_nid</code> <code>str</code> <p>The parent node id.</p> <code>label</code> <code>Optional[str]</code> <p>The label for the node, if left as <code>None</code> will default to the created nid for the node.</p>"},{"location":"reference/endpoints/post_create_nodes/#watz.endpoints.post_create_nodes.CreateUserNode","title":"<code>CreateUserNode</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>A creator model for a user node.</p> <p>Attributes:</p> Name Type Description <code>parent_nid</code> <code>str</code> <p>The parent node id.</p> <code>label</code> <code>str</code> <p>The label for the node, must be a valid, unique email address for the user.</p>"},{"location":"reference/endpoints/post_create_nodes/#watz.endpoints.post_create_nodes.ReqCreateNodes","title":"<code>ReqCreateNodes</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p><code>POST</code>: <code>/api/v1/nodes</code> request model.</p> <p>Attributes:</p> Name Type Description <code>nodes</code> <code>list[Union[CreateActivityNode, CreateUserNode]]</code> <p>A list of nodes to create, either <code>CreateActivityNode</code> or <code>CreateUserNode</code> models.</p>"},{"location":"reference/endpoints/post_create_nodes/#watz.endpoints.post_create_nodes.RespCreateNodes","title":"<code>RespCreateNodes</code>","text":"<p>             Bases: <code>RespBase</code></p> <p><code>POST</code>: <code>/api/v1/nodes</code> response model.</p> <p>Attributes:</p> Name Type Description <code>nids</code> <code>list[str]</code> <p>The list of created node ids in the same order they were given in the request.</p>"},{"location":"reference/endpoints/post_create_traces/","title":"post_create_traces","text":"<p><code>POST</code>: <code>/api/v1/traces</code> endpoint configuration.</p>"},{"location":"reference/endpoints/post_create_traces/#watz.endpoints.post_create_traces.CreateTrace","title":"<code>CreateTrace</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>A creator model for a trace.</p> <p>Attributes:</p> Name Type Description <code>identifier</code> <code>str</code> <p>The trace's identifier, this must be unique.</p> <code>data</code> <code>list[Any]</code> <p>The list of json-compatible data.</p>"},{"location":"reference/endpoints/post_create_traces/#watz.endpoints.post_create_traces.ReqCreateTraces","title":"<code>ReqCreateTraces</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p><code>POST</code>: <code>/api/v1/traces</code> request model.</p> <p>Attributes:</p> Name Type Description <code>traces</code> <code>dict[str, list[CreateTrace]]</code> <p>A dict of node ids to a list of <code>CreateTrace</code> models for each respective node.</p>"},{"location":"reference/endpoints/post_create_traces/#watz.endpoints.post_create_traces.RespCreateTraces","title":"<code>RespCreateTraces</code>","text":"<p>             Bases: <code>RespBase</code></p> <p><code>POST</code>: <code>/api/v1/traces</code> response model.</p> <p>No specific attributes.</p>"},{"location":"reference/endpoints/resp_base/","title":"resp_base","text":"<p>The shared base response model returned from all endpoints.</p>"},{"location":"reference/endpoints/resp_base/#watz.endpoints.resp_base.RespBase","title":"<code>RespBase</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>The base response model for all API endpoints.</p> <p>Attributes:</p> Name Type Description <code>warnings</code> <code>list[str]</code> <p>Warnings returned that did not fail the request, but should be noted.</p>"}]}